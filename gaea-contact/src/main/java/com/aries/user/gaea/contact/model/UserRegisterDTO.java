/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aries.user.gaea.contact.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-02")
public class UserRegisterDTO implements org.apache.thrift.TBase<UserRegisterDTO, UserRegisterDTO._Fields>, java.io.Serializable, Cloneable, Comparable<UserRegisterDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserRegisterDTO");

  private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WECHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("wechat", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BIZ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bizType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserRegisterDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserRegisterDTOTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String account; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String phoneNumber; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String email; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String wechat; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String qq; // optional
  public int bizType; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer image; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String nickname; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT((short)1, "account"),
    PHONE_NUMBER((short)2, "phoneNumber"),
    EMAIL((short)3, "email"),
    PASSWORD((short)4, "password"),
    WECHAT((short)5, "wechat"),
    QQ((short)6, "qq"),
    BIZ_TYPE((short)7, "bizType"),
    IMAGE((short)8, "image"),
    NICKNAME((short)9, "nickname");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT
          return ACCOUNT;
        case 2: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 3: // EMAIL
          return EMAIL;
        case 4: // PASSWORD
          return PASSWORD;
        case 5: // WECHAT
          return WECHAT;
        case 6: // QQ
          return QQ;
        case 7: // BIZ_TYPE
          return BIZ_TYPE;
        case 8: // IMAGE
          return IMAGE;
        case 9: // NICKNAME
          return NICKNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIZTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ACCOUNT,_Fields.PHONE_NUMBER,_Fields.EMAIL,_Fields.PASSWORD,_Fields.WECHAT,_Fields.QQ,_Fields.IMAGE,_Fields.NICKNAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WECHAT, new org.apache.thrift.meta_data.FieldMetaData("wechat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIZ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bizType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserRegisterDTO.class, metaDataMap);
  }

  public UserRegisterDTO() {
  }

  public UserRegisterDTO(
    int bizType)
  {
    this();
    this.bizType = bizType;
    setBizTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserRegisterDTO(UserRegisterDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAccount()) {
      this.account = other.account;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetWechat()) {
      this.wechat = other.wechat;
    }
    if (other.isSetQq()) {
      this.qq = other.qq;
    }
    this.bizType = other.bizType;
    if (other.isSetImage()) {
      this.image = org.apache.thrift.TBaseHelper.copyBinary(other.image);
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
  }

  public UserRegisterDTO deepCopy() {
    return new UserRegisterDTO(this);
  }

  @Override
  public void clear() {
    this.account = null;
    this.phoneNumber = null;
    this.email = null;
    this.password = null;
    this.wechat = null;
    this.qq = null;
    setBizTypeIsSet(false);
    this.bizType = 0;
    this.image = null;
    this.nickname = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAccount() {
    return this.account;
  }

  public UserRegisterDTO setAccount(@org.apache.thrift.annotation.Nullable java.lang.String account) {
    this.account = account;
    return this;
  }

  public void unsetAccount() {
    this.account = null;
  }

  /** Returns true if field account is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount() {
    return this.account != null;
  }

  public void setAccountIsSet(boolean value) {
    if (!value) {
      this.account = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPhoneNumber() {
    return this.phoneNumber;
  }

  public UserRegisterDTO setPhoneNumber(@org.apache.thrift.annotation.Nullable java.lang.String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEmail() {
    return this.email;
  }

  public UserRegisterDTO setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public UserRegisterDTO setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWechat() {
    return this.wechat;
  }

  public UserRegisterDTO setWechat(@org.apache.thrift.annotation.Nullable java.lang.String wechat) {
    this.wechat = wechat;
    return this;
  }

  public void unsetWechat() {
    this.wechat = null;
  }

  /** Returns true if field wechat is set (has been assigned a value) and false otherwise */
  public boolean isSetWechat() {
    return this.wechat != null;
  }

  public void setWechatIsSet(boolean value) {
    if (!value) {
      this.wechat = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQq() {
    return this.qq;
  }

  public UserRegisterDTO setQq(@org.apache.thrift.annotation.Nullable java.lang.String qq) {
    this.qq = qq;
    return this;
  }

  public void unsetQq() {
    this.qq = null;
  }

  /** Returns true if field qq is set (has been assigned a value) and false otherwise */
  public boolean isSetQq() {
    return this.qq != null;
  }

  public void setQqIsSet(boolean value) {
    if (!value) {
      this.qq = null;
    }
  }

  public int getBizType() {
    return this.bizType;
  }

  public UserRegisterDTO setBizType(int bizType) {
    this.bizType = bizType;
    setBizTypeIsSet(true);
    return this;
  }

  public void unsetBizType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIZTYPE_ISSET_ID);
  }

  /** Returns true if field bizType is set (has been assigned a value) and false otherwise */
  public boolean isSetBizType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIZTYPE_ISSET_ID);
  }

  public void setBizTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIZTYPE_ISSET_ID, value);
  }

  public byte[] getImage() {
    setImage(org.apache.thrift.TBaseHelper.rightSize(image));
    return image == null ? null : image.array();
  }

  public java.nio.ByteBuffer bufferForImage() {
    return org.apache.thrift.TBaseHelper.copyBinary(image);
  }

  public UserRegisterDTO setImage(byte[] image) {
    this.image = image == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(image.clone());
    return this;
  }

  public UserRegisterDTO setImage(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer image) {
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNickname() {
    return this.nickname;
  }

  public UserRegisterDTO setNickname(@org.apache.thrift.annotation.Nullable java.lang.String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ACCOUNT:
      if (value == null) {
        unsetAccount();
      } else {
        setAccount((java.lang.String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case WECHAT:
      if (value == null) {
        unsetWechat();
      } else {
        setWechat((java.lang.String)value);
      }
      break;

    case QQ:
      if (value == null) {
        unsetQq();
      } else {
        setQq((java.lang.String)value);
      }
      break;

    case BIZ_TYPE:
      if (value == null) {
        unsetBizType();
      } else {
        setBizType((java.lang.Integer)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        if (value instanceof byte[]) {
          setImage((byte[])value);
        } else {
          setImage((java.nio.ByteBuffer)value);
        }
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT:
      return getAccount();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case EMAIL:
      return getEmail();

    case PASSWORD:
      return getPassword();

    case WECHAT:
      return getWechat();

    case QQ:
      return getQq();

    case BIZ_TYPE:
      return getBizType();

    case IMAGE:
      return getImage();

    case NICKNAME:
      return getNickname();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT:
      return isSetAccount();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case EMAIL:
      return isSetEmail();
    case PASSWORD:
      return isSetPassword();
    case WECHAT:
      return isSetWechat();
    case QQ:
      return isSetQq();
    case BIZ_TYPE:
      return isSetBizType();
    case IMAGE:
      return isSetImage();
    case NICKNAME:
      return isSetNickname();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserRegisterDTO)
      return this.equals((UserRegisterDTO)that);
    return false;
  }

  public boolean equals(UserRegisterDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_account = true && this.isSetAccount();
    boolean that_present_account = true && that.isSetAccount();
    if (this_present_account || that_present_account) {
      if (!(this_present_account && that_present_account))
        return false;
      if (!this.account.equals(that.account))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_wechat = true && this.isSetWechat();
    boolean that_present_wechat = true && that.isSetWechat();
    if (this_present_wechat || that_present_wechat) {
      if (!(this_present_wechat && that_present_wechat))
        return false;
      if (!this.wechat.equals(that.wechat))
        return false;
    }

    boolean this_present_qq = true && this.isSetQq();
    boolean that_present_qq = true && that.isSetQq();
    if (this_present_qq || that_present_qq) {
      if (!(this_present_qq && that_present_qq))
        return false;
      if (!this.qq.equals(that.qq))
        return false;
    }

    boolean this_present_bizType = true;
    boolean that_present_bizType = true;
    if (this_present_bizType || that_present_bizType) {
      if (!(this_present_bizType && that_present_bizType))
        return false;
      if (this.bizType != that.bizType)
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAccount()) ? 131071 : 524287);
    if (isSetAccount())
      hashCode = hashCode * 8191 + account.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhoneNumber()) ? 131071 : 524287);
    if (isSetPhoneNumber())
      hashCode = hashCode * 8191 + phoneNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetWechat()) ? 131071 : 524287);
    if (isSetWechat())
      hashCode = hashCode * 8191 + wechat.hashCode();

    hashCode = hashCode * 8191 + ((isSetQq()) ? 131071 : 524287);
    if (isSetQq())
      hashCode = hashCode * 8191 + qq.hashCode();

    hashCode = hashCode * 8191 + bizType;

    hashCode = hashCode * 8191 + ((isSetImage()) ? 131071 : 524287);
    if (isSetImage())
      hashCode = hashCode * 8191 + image.hashCode();

    hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
    if (isSetNickname())
      hashCode = hashCode * 8191 + nickname.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserRegisterDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhoneNumber()).compareTo(other.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechat()).compareTo(other.isSetWechat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechat, other.wechat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQq()).compareTo(other.isSetQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, other.qq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBizType()).compareTo(other.isSetBizType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizType, other.bizType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserRegisterDTO(");
    boolean first = true;

    if (isSetAccount()) {
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
    }
    if (isSetPhoneNumber()) {
      if (!first) sb.append(", ");
      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetWechat()) {
      if (!first) sb.append(", ");
      sb.append("wechat:");
      if (this.wechat == null) {
        sb.append("null");
      } else {
        sb.append(this.wechat);
      }
      first = false;
    }
    if (isSetQq()) {
      if (!first) sb.append(", ");
      sb.append("qq:");
      if (this.qq == null) {
        sb.append("null");
      } else {
        sb.append(this.qq);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("bizType:");
    sb.append(this.bizType);
    first = false;
    if (isSetImage()) {
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.image, sb);
      }
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'bizType' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserRegisterDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserRegisterDTOStandardScheme getScheme() {
      return new UserRegisterDTOStandardScheme();
    }
  }

  private static class UserRegisterDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserRegisterDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserRegisterDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.account = iprot.readString();
              struct.setAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNumber = iprot.readString();
              struct.setPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WECHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wechat = iprot.readString();
              struct.setWechatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qq = iprot.readString();
              struct.setQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIZ_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizType = iprot.readI32();
              struct.setBizTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image = iprot.readBinary();
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBizType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bizType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserRegisterDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.account != null) {
        if (struct.isSetAccount()) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phoneNumber != null) {
        if (struct.isSetPhoneNumber()) {
          oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.phoneNumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wechat != null) {
        if (struct.isSetWechat()) {
          oprot.writeFieldBegin(WECHAT_FIELD_DESC);
          oprot.writeString(struct.wechat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.qq != null) {
        if (struct.isSetQq()) {
          oprot.writeFieldBegin(QQ_FIELD_DESC);
          oprot.writeString(struct.qq);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(BIZ_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bizType);
      oprot.writeFieldEnd();
      if (struct.image != null) {
        if (struct.isSetImage()) {
          oprot.writeFieldBegin(IMAGE_FIELD_DESC);
          oprot.writeBinary(struct.image);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserRegisterDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserRegisterDTOTupleScheme getScheme() {
      return new UserRegisterDTOTupleScheme();
    }
  }

  private static class UserRegisterDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserRegisterDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserRegisterDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.bizType);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAccount()) {
        optionals.set(0);
      }
      if (struct.isSetPhoneNumber()) {
        optionals.set(1);
      }
      if (struct.isSetEmail()) {
        optionals.set(2);
      }
      if (struct.isSetPassword()) {
        optionals.set(3);
      }
      if (struct.isSetWechat()) {
        optionals.set(4);
      }
      if (struct.isSetQq()) {
        optionals.set(5);
      }
      if (struct.isSetImage()) {
        optionals.set(6);
      }
      if (struct.isSetNickname()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetAccount()) {
        oprot.writeString(struct.account);
      }
      if (struct.isSetPhoneNumber()) {
        oprot.writeString(struct.phoneNumber);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetWechat()) {
        oprot.writeString(struct.wechat);
      }
      if (struct.isSetQq()) {
        oprot.writeString(struct.qq);
      }
      if (struct.isSetImage()) {
        oprot.writeBinary(struct.image);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserRegisterDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.bizType = iprot.readI32();
      struct.setBizTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.account = iprot.readString();
        struct.setAccountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.phoneNumber = iprot.readString();
        struct.setPhoneNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(3)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wechat = iprot.readString();
        struct.setWechatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.qq = iprot.readString();
        struct.setQqIsSet(true);
      }
      if (incoming.get(6)) {
        struct.image = iprot.readBinary();
        struct.setImageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

