/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aries.user.gaea.contact.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-29")
public class UserBaseService {

  public interface Iface {

    public com.aries.user.gaea.contact.model.ThriftResponse userRegister(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO) throws org.apache.thrift.TException;

    public com.aries.user.gaea.contact.model.ThriftResponse userLogin(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO) throws org.apache.thrift.TException;

    public com.aries.user.gaea.contact.model.ThriftResponse userLogout(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException;

    public int checkLoginType(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException;

    public int checkOnline(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void userRegister(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

    public void userLogin(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

    public void userLogout(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

    public void checkLoginType(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void checkOnline(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.aries.user.gaea.contact.model.ThriftResponse userRegister(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO) throws org.apache.thrift.TException
    {
      send_userRegister(companyDTO, userRegisterDTO);
      return recv_userRegister();
    }

    public void send_userRegister(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO) throws org.apache.thrift.TException
    {
      userRegister_args args = new userRegister_args();
      args.setCompanyDTO(companyDTO);
      args.setUserRegisterDTO(userRegisterDTO);
      sendBase("userRegister", args);
    }

    public com.aries.user.gaea.contact.model.ThriftResponse recv_userRegister() throws org.apache.thrift.TException
    {
      userRegister_result result = new userRegister_result();
      receiveBase(result, "userRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userRegister failed: unknown result");
    }

    public com.aries.user.gaea.contact.model.ThriftResponse userLogin(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO) throws org.apache.thrift.TException
    {
      send_userLogin(companyDTO, userLoginDTO);
      return recv_userLogin();
    }

    public void send_userLogin(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO) throws org.apache.thrift.TException
    {
      userLogin_args args = new userLogin_args();
      args.setCompanyDTO(companyDTO);
      args.setUserLoginDTO(userLoginDTO);
      sendBase("userLogin", args);
    }

    public com.aries.user.gaea.contact.model.ThriftResponse recv_userLogin() throws org.apache.thrift.TException
    {
      userLogin_result result = new userLogin_result();
      receiveBase(result, "userLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userLogin failed: unknown result");
    }

    public com.aries.user.gaea.contact.model.ThriftResponse userLogout(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException
    {
      send_userLogout(companyDTO, loginId);
      return recv_userLogout();
    }

    public void send_userLogout(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException
    {
      userLogout_args args = new userLogout_args();
      args.setCompanyDTO(companyDTO);
      args.setLoginId(loginId);
      sendBase("userLogout", args);
    }

    public com.aries.user.gaea.contact.model.ThriftResponse recv_userLogout() throws org.apache.thrift.TException
    {
      userLogout_result result = new userLogout_result();
      receiveBase(result, "userLogout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userLogout failed: unknown result");
    }

    public int checkLoginType(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException
    {
      send_checkLoginType(companyDTO, loginId);
      return recv_checkLoginType();
    }

    public void send_checkLoginType(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException
    {
      checkLoginType_args args = new checkLoginType_args();
      args.setCompanyDTO(companyDTO);
      args.setLoginId(loginId);
      sendBase("checkLoginType", args);
    }

    public int recv_checkLoginType() throws org.apache.thrift.TException
    {
      checkLoginType_result result = new checkLoginType_result();
      receiveBase(result, "checkLoginType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkLoginType failed: unknown result");
    }

    public int checkOnline(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException
    {
      send_checkOnline(companyDTO, loginId);
      return recv_checkOnline();
    }

    public void send_checkOnline(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId) throws org.apache.thrift.TException
    {
      checkOnline_args args = new checkOnline_args();
      args.setCompanyDTO(companyDTO);
      args.setLoginId(loginId);
      sendBase("checkOnline", args);
    }

    public int recv_checkOnline() throws org.apache.thrift.TException
    {
      checkOnline_result result = new checkOnline_result();
      receiveBase(result, "checkOnline");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkOnline failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void userRegister(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userRegister_call method_call = new userRegister_call(companyDTO, userRegisterDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userRegister_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.user.gaea.contact.model.ThriftResponse> {
      private com.aries.user.gaea.contact.model.CompanyDTO companyDTO;
      private com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO;
      public userRegister_call(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyDTO = companyDTO;
        this.userRegisterDTO = userRegisterDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userRegister_args args = new userRegister_args();
        args.setCompanyDTO(companyDTO);
        args.setUserRegisterDTO(userRegisterDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aries.user.gaea.contact.model.ThriftResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userRegister();
      }
    }

    public void userLogin(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userLogin_call method_call = new userLogin_call(companyDTO, userLoginDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userLogin_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.user.gaea.contact.model.ThriftResponse> {
      private com.aries.user.gaea.contact.model.CompanyDTO companyDTO;
      private com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO;
      public userLogin_call(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyDTO = companyDTO;
        this.userLoginDTO = userLoginDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userLogin_args args = new userLogin_args();
        args.setCompanyDTO(companyDTO);
        args.setUserLoginDTO(userLoginDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aries.user.gaea.contact.model.ThriftResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userLogin();
      }
    }

    public void userLogout(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userLogout_call method_call = new userLogout_call(companyDTO, loginId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userLogout_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.user.gaea.contact.model.ThriftResponse> {
      private com.aries.user.gaea.contact.model.CompanyDTO companyDTO;
      private java.lang.String loginId;
      public userLogout_call(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyDTO = companyDTO;
        this.loginId = loginId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userLogout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userLogout_args args = new userLogout_args();
        args.setCompanyDTO(companyDTO);
        args.setLoginId(loginId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aries.user.gaea.contact.model.ThriftResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userLogout();
      }
    }

    public void checkLoginType(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkLoginType_call method_call = new checkLoginType_call(companyDTO, loginId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkLoginType_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.aries.user.gaea.contact.model.CompanyDTO companyDTO;
      private java.lang.String loginId;
      public checkLoginType_call(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyDTO = companyDTO;
        this.loginId = loginId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkLoginType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkLoginType_args args = new checkLoginType_args();
        args.setCompanyDTO(companyDTO);
        args.setLoginId(loginId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkLoginType();
      }
    }

    public void checkOnline(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkOnline_call method_call = new checkOnline_call(companyDTO, loginId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkOnline_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.aries.user.gaea.contact.model.CompanyDTO companyDTO;
      private java.lang.String loginId;
      public checkOnline_call(com.aries.user.gaea.contact.model.CompanyDTO companyDTO, java.lang.String loginId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyDTO = companyDTO;
        this.loginId = loginId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkOnline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkOnline_args args = new checkOnline_args();
        args.setCompanyDTO(companyDTO);
        args.setLoginId(loginId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkOnline();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("userRegister", new userRegister());
      processMap.put("userLogin", new userLogin());
      processMap.put("userLogout", new userLogout());
      processMap.put("checkLoginType", new checkLoginType());
      processMap.put("checkOnline", new checkOnline());
      return processMap;
    }

    public static class userRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userRegister_args> {
      public userRegister() {
        super("userRegister");
      }

      public userRegister_args getEmptyArgsInstance() {
        return new userRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public userRegister_result getResult(I iface, userRegister_args args) throws org.apache.thrift.TException {
        userRegister_result result = new userRegister_result();
        result.success = iface.userRegister(args.companyDTO, args.userRegisterDTO);
        return result;
      }
    }

    public static class userLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userLogin_args> {
      public userLogin() {
        super("userLogin");
      }

      public userLogin_args getEmptyArgsInstance() {
        return new userLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public userLogin_result getResult(I iface, userLogin_args args) throws org.apache.thrift.TException {
        userLogin_result result = new userLogin_result();
        result.success = iface.userLogin(args.companyDTO, args.userLoginDTO);
        return result;
      }
    }

    public static class userLogout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userLogout_args> {
      public userLogout() {
        super("userLogout");
      }

      public userLogout_args getEmptyArgsInstance() {
        return new userLogout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public userLogout_result getResult(I iface, userLogout_args args) throws org.apache.thrift.TException {
        userLogout_result result = new userLogout_result();
        result.success = iface.userLogout(args.companyDTO, args.loginId);
        return result;
      }
    }

    public static class checkLoginType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkLoginType_args> {
      public checkLoginType() {
        super("checkLoginType");
      }

      public checkLoginType_args getEmptyArgsInstance() {
        return new checkLoginType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkLoginType_result getResult(I iface, checkLoginType_args args) throws org.apache.thrift.TException {
        checkLoginType_result result = new checkLoginType_result();
        result.success = iface.checkLoginType(args.companyDTO, args.loginId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkOnline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkOnline_args> {
      public checkOnline() {
        super("checkOnline");
      }

      public checkOnline_args getEmptyArgsInstance() {
        return new checkOnline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkOnline_result getResult(I iface, checkOnline_args args) throws org.apache.thrift.TException {
        checkOnline_result result = new checkOnline_result();
        result.success = iface.checkOnline(args.companyDTO, args.loginId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("userRegister", new userRegister());
      processMap.put("userLogin", new userLogin());
      processMap.put("userLogout", new userLogout());
      processMap.put("checkLoginType", new checkLoginType());
      processMap.put("checkOnline", new checkOnline());
      return processMap;
    }

    public static class userRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userRegister_args, com.aries.user.gaea.contact.model.ThriftResponse> {
      public userRegister() {
        super("userRegister");
      }

      public userRegister_args getEmptyArgsInstance() {
        return new userRegister_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse>() { 
          public void onComplete(com.aries.user.gaea.contact.model.ThriftResponse o) {
            userRegister_result result = new userRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            userRegister_result result = new userRegister_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userRegister_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
        iface.userRegister(args.companyDTO, args.userRegisterDTO,resultHandler);
      }
    }

    public static class userLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userLogin_args, com.aries.user.gaea.contact.model.ThriftResponse> {
      public userLogin() {
        super("userLogin");
      }

      public userLogin_args getEmptyArgsInstance() {
        return new userLogin_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse>() { 
          public void onComplete(com.aries.user.gaea.contact.model.ThriftResponse o) {
            userLogin_result result = new userLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            userLogin_result result = new userLogin_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userLogin_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
        iface.userLogin(args.companyDTO, args.userLoginDTO,resultHandler);
      }
    }

    public static class userLogout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userLogout_args, com.aries.user.gaea.contact.model.ThriftResponse> {
      public userLogout() {
        super("userLogout");
      }

      public userLogout_args getEmptyArgsInstance() {
        return new userLogout_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse>() { 
          public void onComplete(com.aries.user.gaea.contact.model.ThriftResponse o) {
            userLogout_result result = new userLogout_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            userLogout_result result = new userLogout_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userLogout_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.user.gaea.contact.model.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
        iface.userLogout(args.companyDTO, args.loginId,resultHandler);
      }
    }

    public static class checkLoginType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkLoginType_args, java.lang.Integer> {
      public checkLoginType() {
        super("checkLoginType");
      }

      public checkLoginType_args getEmptyArgsInstance() {
        return new checkLoginType_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            checkLoginType_result result = new checkLoginType_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkLoginType_result result = new checkLoginType_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkLoginType_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.checkLoginType(args.companyDTO, args.loginId,resultHandler);
      }
    }

    public static class checkOnline<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkOnline_args, java.lang.Integer> {
      public checkOnline() {
        super("checkOnline");
      }

      public checkOnline_args getEmptyArgsInstance() {
        return new checkOnline_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            checkOnline_result result = new checkOnline_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkOnline_result result = new checkOnline_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkOnline_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.checkOnline(args.companyDTO, args.loginId,resultHandler);
      }
    }

  }

  public static class userRegister_args implements org.apache.thrift.TBase<userRegister_args, userRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<userRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRegister_args");

    private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_REGISTER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("userRegisterDTO", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userRegister_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userRegister_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO; // required
    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_DTO((short)1, "companyDTO"),
      USER_REGISTER_DTO((short)2, "userRegisterDTO");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_DTO
            return COMPANY_DTO;
          case 2: // USER_REGISTER_DTO
            return USER_REGISTER_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.CompanyDTO.class)));
      tmpMap.put(_Fields.USER_REGISTER_DTO, new org.apache.thrift.meta_data.FieldMetaData("userRegisterDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.UserRegisterDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRegister_args.class, metaDataMap);
    }

    public userRegister_args() {
    }

    public userRegister_args(
      com.aries.user.gaea.contact.model.CompanyDTO companyDTO,
      com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO)
    {
      this();
      this.companyDTO = companyDTO;
      this.userRegisterDTO = userRegisterDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRegister_args(userRegister_args other) {
      if (other.isSetCompanyDTO()) {
        this.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO(other.companyDTO);
      }
      if (other.isSetUserRegisterDTO()) {
        this.userRegisterDTO = new com.aries.user.gaea.contact.model.UserRegisterDTO(other.userRegisterDTO);
      }
    }

    public userRegister_args deepCopy() {
      return new userRegister_args(this);
    }

    @Override
    public void clear() {
      this.companyDTO = null;
      this.userRegisterDTO = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.CompanyDTO getCompanyDTO() {
      return this.companyDTO;
    }

    public userRegister_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO) {
      this.companyDTO = companyDTO;
      return this;
    }

    public void unsetCompanyDTO() {
      this.companyDTO = null;
    }

    /** Returns true if field companyDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyDTO() {
      return this.companyDTO != null;
    }

    public void setCompanyDTOIsSet(boolean value) {
      if (!value) {
        this.companyDTO = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.UserRegisterDTO getUserRegisterDTO() {
      return this.userRegisterDTO;
    }

    public userRegister_args setUserRegisterDTO(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.UserRegisterDTO userRegisterDTO) {
      this.userRegisterDTO = userRegisterDTO;
      return this;
    }

    public void unsetUserRegisterDTO() {
      this.userRegisterDTO = null;
    }

    /** Returns true if field userRegisterDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUserRegisterDTO() {
      return this.userRegisterDTO != null;
    }

    public void setUserRegisterDTOIsSet(boolean value) {
      if (!value) {
        this.userRegisterDTO = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_DTO:
        if (value == null) {
          unsetCompanyDTO();
        } else {
          setCompanyDTO((com.aries.user.gaea.contact.model.CompanyDTO)value);
        }
        break;

      case USER_REGISTER_DTO:
        if (value == null) {
          unsetUserRegisterDTO();
        } else {
          setUserRegisterDTO((com.aries.user.gaea.contact.model.UserRegisterDTO)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_DTO:
        return getCompanyDTO();

      case USER_REGISTER_DTO:
        return getUserRegisterDTO();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_DTO:
        return isSetCompanyDTO();
      case USER_REGISTER_DTO:
        return isSetUserRegisterDTO();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userRegister_args)
        return this.equals((userRegister_args)that);
      return false;
    }

    public boolean equals(userRegister_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyDTO = true && this.isSetCompanyDTO();
      boolean that_present_companyDTO = true && that.isSetCompanyDTO();
      if (this_present_companyDTO || that_present_companyDTO) {
        if (!(this_present_companyDTO && that_present_companyDTO))
          return false;
        if (!this.companyDTO.equals(that.companyDTO))
          return false;
      }

      boolean this_present_userRegisterDTO = true && this.isSetUserRegisterDTO();
      boolean that_present_userRegisterDTO = true && that.isSetUserRegisterDTO();
      if (this_present_userRegisterDTO || that_present_userRegisterDTO) {
        if (!(this_present_userRegisterDTO && that_present_userRegisterDTO))
          return false;
        if (!this.userRegisterDTO.equals(that.userRegisterDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
      if (isSetCompanyDTO())
        hashCode = hashCode * 8191 + companyDTO.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserRegisterDTO()) ? 131071 : 524287);
      if (isSetUserRegisterDTO())
        hashCode = hashCode * 8191 + userRegisterDTO.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserRegisterDTO()).compareTo(other.isSetUserRegisterDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserRegisterDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRegisterDTO, other.userRegisterDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userRegister_args(");
      boolean first = true;

      sb.append("companyDTO:");
      if (this.companyDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.companyDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userRegisterDTO:");
      if (this.userRegisterDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.userRegisterDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyDTO != null) {
        companyDTO.validate();
      }
      if (userRegisterDTO != null) {
        userRegisterDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRegister_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRegister_argsStandardScheme getScheme() {
        return new userRegister_argsStandardScheme();
      }
    }

    private static class userRegister_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<userRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
                struct.companyDTO.read(iprot);
                struct.setCompanyDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_REGISTER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userRegisterDTO = new com.aries.user.gaea.contact.model.UserRegisterDTO();
                struct.userRegisterDTO.read(iprot);
                struct.setUserRegisterDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyDTO != null) {
          oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
          struct.companyDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userRegisterDTO != null) {
          oprot.writeFieldBegin(USER_REGISTER_DTO_FIELD_DESC);
          struct.userRegisterDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRegister_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRegister_argsTupleScheme getScheme() {
        return new userRegister_argsTupleScheme();
      }
    }

    private static class userRegister_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<userRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyDTO()) {
          optionals.set(0);
        }
        if (struct.isSetUserRegisterDTO()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompanyDTO()) {
          struct.companyDTO.write(oprot);
        }
        if (struct.isSetUserRegisterDTO()) {
          struct.userRegisterDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
          struct.companyDTO.read(iprot);
          struct.setCompanyDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userRegisterDTO = new com.aries.user.gaea.contact.model.UserRegisterDTO();
          struct.userRegisterDTO.read(iprot);
          struct.setUserRegisterDTOIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userRegister_result implements org.apache.thrift.TBase<userRegister_result, userRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<userRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userRegister_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userRegister_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.ThriftResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.ThriftResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRegister_result.class, metaDataMap);
    }

    public userRegister_result() {
    }

    public userRegister_result(
      com.aries.user.gaea.contact.model.ThriftResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRegister_result(userRegister_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aries.user.gaea.contact.model.ThriftResponse(other.success);
      }
    }

    public userRegister_result deepCopy() {
      return new userRegister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.ThriftResponse getSuccess() {
      return this.success;
    }

    public userRegister_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.ThriftResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aries.user.gaea.contact.model.ThriftResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userRegister_result)
        return this.equals((userRegister_result)that);
      return false;
    }

    public boolean equals(userRegister_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRegister_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRegister_resultStandardScheme getScheme() {
        return new userRegister_resultStandardScheme();
      }
    }

    private static class userRegister_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<userRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aries.user.gaea.contact.model.ThriftResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRegister_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRegister_resultTupleScheme getScheme() {
        return new userRegister_resultTupleScheme();
      }
    }

    private static class userRegister_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<userRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.aries.user.gaea.contact.model.ThriftResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userLogin_args implements org.apache.thrift.TBase<userLogin_args, userLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<userLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogin_args");

    private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_LOGIN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("userLoginDTO", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userLogin_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userLogin_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO; // required
    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_DTO((short)1, "companyDTO"),
      USER_LOGIN_DTO((short)2, "userLoginDTO");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_DTO
            return COMPANY_DTO;
          case 2: // USER_LOGIN_DTO
            return USER_LOGIN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.CompanyDTO.class)));
      tmpMap.put(_Fields.USER_LOGIN_DTO, new org.apache.thrift.meta_data.FieldMetaData("userLoginDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.UserLoginDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogin_args.class, metaDataMap);
    }

    public userLogin_args() {
    }

    public userLogin_args(
      com.aries.user.gaea.contact.model.CompanyDTO companyDTO,
      com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO)
    {
      this();
      this.companyDTO = companyDTO;
      this.userLoginDTO = userLoginDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogin_args(userLogin_args other) {
      if (other.isSetCompanyDTO()) {
        this.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO(other.companyDTO);
      }
      if (other.isSetUserLoginDTO()) {
        this.userLoginDTO = new com.aries.user.gaea.contact.model.UserLoginDTO(other.userLoginDTO);
      }
    }

    public userLogin_args deepCopy() {
      return new userLogin_args(this);
    }

    @Override
    public void clear() {
      this.companyDTO = null;
      this.userLoginDTO = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.CompanyDTO getCompanyDTO() {
      return this.companyDTO;
    }

    public userLogin_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO) {
      this.companyDTO = companyDTO;
      return this;
    }

    public void unsetCompanyDTO() {
      this.companyDTO = null;
    }

    /** Returns true if field companyDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyDTO() {
      return this.companyDTO != null;
    }

    public void setCompanyDTOIsSet(boolean value) {
      if (!value) {
        this.companyDTO = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.UserLoginDTO getUserLoginDTO() {
      return this.userLoginDTO;
    }

    public userLogin_args setUserLoginDTO(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.UserLoginDTO userLoginDTO) {
      this.userLoginDTO = userLoginDTO;
      return this;
    }

    public void unsetUserLoginDTO() {
      this.userLoginDTO = null;
    }

    /** Returns true if field userLoginDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUserLoginDTO() {
      return this.userLoginDTO != null;
    }

    public void setUserLoginDTOIsSet(boolean value) {
      if (!value) {
        this.userLoginDTO = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_DTO:
        if (value == null) {
          unsetCompanyDTO();
        } else {
          setCompanyDTO((com.aries.user.gaea.contact.model.CompanyDTO)value);
        }
        break;

      case USER_LOGIN_DTO:
        if (value == null) {
          unsetUserLoginDTO();
        } else {
          setUserLoginDTO((com.aries.user.gaea.contact.model.UserLoginDTO)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_DTO:
        return getCompanyDTO();

      case USER_LOGIN_DTO:
        return getUserLoginDTO();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_DTO:
        return isSetCompanyDTO();
      case USER_LOGIN_DTO:
        return isSetUserLoginDTO();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogin_args)
        return this.equals((userLogin_args)that);
      return false;
    }

    public boolean equals(userLogin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyDTO = true && this.isSetCompanyDTO();
      boolean that_present_companyDTO = true && that.isSetCompanyDTO();
      if (this_present_companyDTO || that_present_companyDTO) {
        if (!(this_present_companyDTO && that_present_companyDTO))
          return false;
        if (!this.companyDTO.equals(that.companyDTO))
          return false;
      }

      boolean this_present_userLoginDTO = true && this.isSetUserLoginDTO();
      boolean that_present_userLoginDTO = true && that.isSetUserLoginDTO();
      if (this_present_userLoginDTO || that_present_userLoginDTO) {
        if (!(this_present_userLoginDTO && that_present_userLoginDTO))
          return false;
        if (!this.userLoginDTO.equals(that.userLoginDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
      if (isSetCompanyDTO())
        hashCode = hashCode * 8191 + companyDTO.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserLoginDTO()) ? 131071 : 524287);
      if (isSetUserLoginDTO())
        hashCode = hashCode * 8191 + userLoginDTO.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserLoginDTO()).compareTo(other.isSetUserLoginDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserLoginDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLoginDTO, other.userLoginDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userLogin_args(");
      boolean first = true;

      sb.append("companyDTO:");
      if (this.companyDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.companyDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userLoginDTO:");
      if (this.userLoginDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.userLoginDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyDTO != null) {
        companyDTO.validate();
      }
      if (userLoginDTO != null) {
        userLoginDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogin_argsStandardScheme getScheme() {
        return new userLogin_argsStandardScheme();
      }
    }

    private static class userLogin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<userLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
                struct.companyDTO.read(iprot);
                struct.setCompanyDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_LOGIN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userLoginDTO = new com.aries.user.gaea.contact.model.UserLoginDTO();
                struct.userLoginDTO.read(iprot);
                struct.setUserLoginDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyDTO != null) {
          oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
          struct.companyDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userLoginDTO != null) {
          oprot.writeFieldBegin(USER_LOGIN_DTO_FIELD_DESC);
          struct.userLoginDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogin_argsTupleScheme getScheme() {
        return new userLogin_argsTupleScheme();
      }
    }

    private static class userLogin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<userLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyDTO()) {
          optionals.set(0);
        }
        if (struct.isSetUserLoginDTO()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompanyDTO()) {
          struct.companyDTO.write(oprot);
        }
        if (struct.isSetUserLoginDTO()) {
          struct.userLoginDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
          struct.companyDTO.read(iprot);
          struct.setCompanyDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userLoginDTO = new com.aries.user.gaea.contact.model.UserLoginDTO();
          struct.userLoginDTO.read(iprot);
          struct.setUserLoginDTOIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userLogin_result implements org.apache.thrift.TBase<userLogin_result, userLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<userLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userLogin_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userLogin_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.ThriftResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.ThriftResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogin_result.class, metaDataMap);
    }

    public userLogin_result() {
    }

    public userLogin_result(
      com.aries.user.gaea.contact.model.ThriftResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogin_result(userLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aries.user.gaea.contact.model.ThriftResponse(other.success);
      }
    }

    public userLogin_result deepCopy() {
      return new userLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.ThriftResponse getSuccess() {
      return this.success;
    }

    public userLogin_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.ThriftResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aries.user.gaea.contact.model.ThriftResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogin_result)
        return this.equals((userLogin_result)that);
      return false;
    }

    public boolean equals(userLogin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogin_resultStandardScheme getScheme() {
        return new userLogin_resultStandardScheme();
      }
    }

    private static class userLogin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<userLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aries.user.gaea.contact.model.ThriftResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogin_resultTupleScheme getScheme() {
        return new userLogin_resultTupleScheme();
      }
    }

    private static class userLogin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<userLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.aries.user.gaea.contact.model.ThriftResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userLogout_args implements org.apache.thrift.TBase<userLogout_args, userLogout_args._Fields>, java.io.Serializable, Cloneable, Comparable<userLogout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogout_args");

    private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userLogout_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userLogout_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String loginId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_DTO((short)1, "companyDTO"),
      LOGIN_ID((short)2, "loginId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_DTO
            return COMPANY_DTO;
          case 2: // LOGIN_ID
            return LOGIN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.CompanyDTO.class)));
      tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogout_args.class, metaDataMap);
    }

    public userLogout_args() {
    }

    public userLogout_args(
      com.aries.user.gaea.contact.model.CompanyDTO companyDTO,
      java.lang.String loginId)
    {
      this();
      this.companyDTO = companyDTO;
      this.loginId = loginId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogout_args(userLogout_args other) {
      if (other.isSetCompanyDTO()) {
        this.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO(other.companyDTO);
      }
      if (other.isSetLoginId()) {
        this.loginId = other.loginId;
      }
    }

    public userLogout_args deepCopy() {
      return new userLogout_args(this);
    }

    @Override
    public void clear() {
      this.companyDTO = null;
      this.loginId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.CompanyDTO getCompanyDTO() {
      return this.companyDTO;
    }

    public userLogout_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO) {
      this.companyDTO = companyDTO;
      return this;
    }

    public void unsetCompanyDTO() {
      this.companyDTO = null;
    }

    /** Returns true if field companyDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyDTO() {
      return this.companyDTO != null;
    }

    public void setCompanyDTOIsSet(boolean value) {
      if (!value) {
        this.companyDTO = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLoginId() {
      return this.loginId;
    }

    public userLogout_args setLoginId(@org.apache.thrift.annotation.Nullable java.lang.String loginId) {
      this.loginId = loginId;
      return this;
    }

    public void unsetLoginId() {
      this.loginId = null;
    }

    /** Returns true if field loginId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginId() {
      return this.loginId != null;
    }

    public void setLoginIdIsSet(boolean value) {
      if (!value) {
        this.loginId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_DTO:
        if (value == null) {
          unsetCompanyDTO();
        } else {
          setCompanyDTO((com.aries.user.gaea.contact.model.CompanyDTO)value);
        }
        break;

      case LOGIN_ID:
        if (value == null) {
          unsetLoginId();
        } else {
          setLoginId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_DTO:
        return getCompanyDTO();

      case LOGIN_ID:
        return getLoginId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_DTO:
        return isSetCompanyDTO();
      case LOGIN_ID:
        return isSetLoginId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogout_args)
        return this.equals((userLogout_args)that);
      return false;
    }

    public boolean equals(userLogout_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyDTO = true && this.isSetCompanyDTO();
      boolean that_present_companyDTO = true && that.isSetCompanyDTO();
      if (this_present_companyDTO || that_present_companyDTO) {
        if (!(this_present_companyDTO && that_present_companyDTO))
          return false;
        if (!this.companyDTO.equals(that.companyDTO))
          return false;
      }

      boolean this_present_loginId = true && this.isSetLoginId();
      boolean that_present_loginId = true && that.isSetLoginId();
      if (this_present_loginId || that_present_loginId) {
        if (!(this_present_loginId && that_present_loginId))
          return false;
        if (!this.loginId.equals(that.loginId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
      if (isSetCompanyDTO())
        hashCode = hashCode * 8191 + companyDTO.hashCode();

      hashCode = hashCode * 8191 + ((isSetLoginId()) ? 131071 : 524287);
      if (isSetLoginId())
        hashCode = hashCode * 8191 + loginId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userLogout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLoginId()).compareTo(other.isSetLoginId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginId, other.loginId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userLogout_args(");
      boolean first = true;

      sb.append("companyDTO:");
      if (this.companyDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.companyDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginId:");
      if (this.loginId == null) {
        sb.append("null");
      } else {
        sb.append(this.loginId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyDTO != null) {
        companyDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogout_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogout_argsStandardScheme getScheme() {
        return new userLogout_argsStandardScheme();
      }
    }

    private static class userLogout_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<userLogout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
                struct.companyDTO.read(iprot);
                struct.setCompanyDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginId = iprot.readString();
                struct.setLoginIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyDTO != null) {
          oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
          struct.companyDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginId != null) {
          oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.loginId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogout_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogout_argsTupleScheme getScheme() {
        return new userLogout_argsTupleScheme();
      }
    }

    private static class userLogout_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<userLogout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyDTO()) {
          optionals.set(0);
        }
        if (struct.isSetLoginId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompanyDTO()) {
          struct.companyDTO.write(oprot);
        }
        if (struct.isSetLoginId()) {
          oprot.writeString(struct.loginId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
          struct.companyDTO.read(iprot);
          struct.setCompanyDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginId = iprot.readString();
          struct.setLoginIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userLogout_result implements org.apache.thrift.TBase<userLogout_result, userLogout_result._Fields>, java.io.Serializable, Cloneable, Comparable<userLogout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userLogout_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userLogout_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.ThriftResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.ThriftResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogout_result.class, metaDataMap);
    }

    public userLogout_result() {
    }

    public userLogout_result(
      com.aries.user.gaea.contact.model.ThriftResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogout_result(userLogout_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aries.user.gaea.contact.model.ThriftResponse(other.success);
      }
    }

    public userLogout_result deepCopy() {
      return new userLogout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.ThriftResponse getSuccess() {
      return this.success;
    }

    public userLogout_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.ThriftResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aries.user.gaea.contact.model.ThriftResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogout_result)
        return this.equals((userLogout_result)that);
      return false;
    }

    public boolean equals(userLogout_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userLogout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userLogout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogout_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogout_resultStandardScheme getScheme() {
        return new userLogout_resultStandardScheme();
      }
    }

    private static class userLogout_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<userLogout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aries.user.gaea.contact.model.ThriftResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogout_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogout_resultTupleScheme getScheme() {
        return new userLogout_resultTupleScheme();
      }
    }

    private static class userLogout_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<userLogout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.aries.user.gaea.contact.model.ThriftResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkLoginType_args implements org.apache.thrift.TBase<checkLoginType_args, checkLoginType_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkLoginType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkLoginType_args");

    private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkLoginType_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkLoginType_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String loginId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_DTO((short)1, "companyDTO"),
      LOGIN_ID((short)2, "loginId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_DTO
            return COMPANY_DTO;
          case 2: // LOGIN_ID
            return LOGIN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.CompanyDTO.class)));
      tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkLoginType_args.class, metaDataMap);
    }

    public checkLoginType_args() {
    }

    public checkLoginType_args(
      com.aries.user.gaea.contact.model.CompanyDTO companyDTO,
      java.lang.String loginId)
    {
      this();
      this.companyDTO = companyDTO;
      this.loginId = loginId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkLoginType_args(checkLoginType_args other) {
      if (other.isSetCompanyDTO()) {
        this.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO(other.companyDTO);
      }
      if (other.isSetLoginId()) {
        this.loginId = other.loginId;
      }
    }

    public checkLoginType_args deepCopy() {
      return new checkLoginType_args(this);
    }

    @Override
    public void clear() {
      this.companyDTO = null;
      this.loginId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.CompanyDTO getCompanyDTO() {
      return this.companyDTO;
    }

    public checkLoginType_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO) {
      this.companyDTO = companyDTO;
      return this;
    }

    public void unsetCompanyDTO() {
      this.companyDTO = null;
    }

    /** Returns true if field companyDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyDTO() {
      return this.companyDTO != null;
    }

    public void setCompanyDTOIsSet(boolean value) {
      if (!value) {
        this.companyDTO = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLoginId() {
      return this.loginId;
    }

    public checkLoginType_args setLoginId(@org.apache.thrift.annotation.Nullable java.lang.String loginId) {
      this.loginId = loginId;
      return this;
    }

    public void unsetLoginId() {
      this.loginId = null;
    }

    /** Returns true if field loginId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginId() {
      return this.loginId != null;
    }

    public void setLoginIdIsSet(boolean value) {
      if (!value) {
        this.loginId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_DTO:
        if (value == null) {
          unsetCompanyDTO();
        } else {
          setCompanyDTO((com.aries.user.gaea.contact.model.CompanyDTO)value);
        }
        break;

      case LOGIN_ID:
        if (value == null) {
          unsetLoginId();
        } else {
          setLoginId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_DTO:
        return getCompanyDTO();

      case LOGIN_ID:
        return getLoginId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_DTO:
        return isSetCompanyDTO();
      case LOGIN_ID:
        return isSetLoginId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkLoginType_args)
        return this.equals((checkLoginType_args)that);
      return false;
    }

    public boolean equals(checkLoginType_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyDTO = true && this.isSetCompanyDTO();
      boolean that_present_companyDTO = true && that.isSetCompanyDTO();
      if (this_present_companyDTO || that_present_companyDTO) {
        if (!(this_present_companyDTO && that_present_companyDTO))
          return false;
        if (!this.companyDTO.equals(that.companyDTO))
          return false;
      }

      boolean this_present_loginId = true && this.isSetLoginId();
      boolean that_present_loginId = true && that.isSetLoginId();
      if (this_present_loginId || that_present_loginId) {
        if (!(this_present_loginId && that_present_loginId))
          return false;
        if (!this.loginId.equals(that.loginId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
      if (isSetCompanyDTO())
        hashCode = hashCode * 8191 + companyDTO.hashCode();

      hashCode = hashCode * 8191 + ((isSetLoginId()) ? 131071 : 524287);
      if (isSetLoginId())
        hashCode = hashCode * 8191 + loginId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkLoginType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLoginId()).compareTo(other.isSetLoginId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginId, other.loginId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkLoginType_args(");
      boolean first = true;

      sb.append("companyDTO:");
      if (this.companyDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.companyDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginId:");
      if (this.loginId == null) {
        sb.append("null");
      } else {
        sb.append(this.loginId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyDTO != null) {
        companyDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkLoginType_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkLoginType_argsStandardScheme getScheme() {
        return new checkLoginType_argsStandardScheme();
      }
    }

    private static class checkLoginType_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkLoginType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkLoginType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
                struct.companyDTO.read(iprot);
                struct.setCompanyDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginId = iprot.readString();
                struct.setLoginIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkLoginType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyDTO != null) {
          oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
          struct.companyDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginId != null) {
          oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.loginId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkLoginType_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkLoginType_argsTupleScheme getScheme() {
        return new checkLoginType_argsTupleScheme();
      }
    }

    private static class checkLoginType_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkLoginType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkLoginType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyDTO()) {
          optionals.set(0);
        }
        if (struct.isSetLoginId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompanyDTO()) {
          struct.companyDTO.write(oprot);
        }
        if (struct.isSetLoginId()) {
          oprot.writeString(struct.loginId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkLoginType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
          struct.companyDTO.read(iprot);
          struct.setCompanyDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginId = iprot.readString();
          struct.setLoginIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkLoginType_result implements org.apache.thrift.TBase<checkLoginType_result, checkLoginType_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkLoginType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkLoginType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkLoginType_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkLoginType_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkLoginType_result.class, metaDataMap);
    }

    public checkLoginType_result() {
    }

    public checkLoginType_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkLoginType_result(checkLoginType_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkLoginType_result deepCopy() {
      return new checkLoginType_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkLoginType_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkLoginType_result)
        return this.equals((checkLoginType_result)that);
      return false;
    }

    public boolean equals(checkLoginType_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(checkLoginType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkLoginType_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkLoginType_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkLoginType_resultStandardScheme getScheme() {
        return new checkLoginType_resultStandardScheme();
      }
    }

    private static class checkLoginType_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkLoginType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkLoginType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkLoginType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkLoginType_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkLoginType_resultTupleScheme getScheme() {
        return new checkLoginType_resultTupleScheme();
      }
    }

    private static class checkLoginType_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkLoginType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkLoginType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkLoginType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkOnline_args implements org.apache.thrift.TBase<checkOnline_args, checkOnline_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkOnline_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkOnline_args");

    private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkOnline_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkOnline_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String loginId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_DTO((short)1, "companyDTO"),
      LOGIN_ID((short)2, "loginId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_DTO
            return COMPANY_DTO;
          case 2: // LOGIN_ID
            return LOGIN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.user.gaea.contact.model.CompanyDTO.class)));
      tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkOnline_args.class, metaDataMap);
    }

    public checkOnline_args() {
    }

    public checkOnline_args(
      com.aries.user.gaea.contact.model.CompanyDTO companyDTO,
      java.lang.String loginId)
    {
      this();
      this.companyDTO = companyDTO;
      this.loginId = loginId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkOnline_args(checkOnline_args other) {
      if (other.isSetCompanyDTO()) {
        this.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO(other.companyDTO);
      }
      if (other.isSetLoginId()) {
        this.loginId = other.loginId;
      }
    }

    public checkOnline_args deepCopy() {
      return new checkOnline_args(this);
    }

    @Override
    public void clear() {
      this.companyDTO = null;
      this.loginId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.user.gaea.contact.model.CompanyDTO getCompanyDTO() {
      return this.companyDTO;
    }

    public checkOnline_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.user.gaea.contact.model.CompanyDTO companyDTO) {
      this.companyDTO = companyDTO;
      return this;
    }

    public void unsetCompanyDTO() {
      this.companyDTO = null;
    }

    /** Returns true if field companyDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyDTO() {
      return this.companyDTO != null;
    }

    public void setCompanyDTOIsSet(boolean value) {
      if (!value) {
        this.companyDTO = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLoginId() {
      return this.loginId;
    }

    public checkOnline_args setLoginId(@org.apache.thrift.annotation.Nullable java.lang.String loginId) {
      this.loginId = loginId;
      return this;
    }

    public void unsetLoginId() {
      this.loginId = null;
    }

    /** Returns true if field loginId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginId() {
      return this.loginId != null;
    }

    public void setLoginIdIsSet(boolean value) {
      if (!value) {
        this.loginId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_DTO:
        if (value == null) {
          unsetCompanyDTO();
        } else {
          setCompanyDTO((com.aries.user.gaea.contact.model.CompanyDTO)value);
        }
        break;

      case LOGIN_ID:
        if (value == null) {
          unsetLoginId();
        } else {
          setLoginId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_DTO:
        return getCompanyDTO();

      case LOGIN_ID:
        return getLoginId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_DTO:
        return isSetCompanyDTO();
      case LOGIN_ID:
        return isSetLoginId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkOnline_args)
        return this.equals((checkOnline_args)that);
      return false;
    }

    public boolean equals(checkOnline_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyDTO = true && this.isSetCompanyDTO();
      boolean that_present_companyDTO = true && that.isSetCompanyDTO();
      if (this_present_companyDTO || that_present_companyDTO) {
        if (!(this_present_companyDTO && that_present_companyDTO))
          return false;
        if (!this.companyDTO.equals(that.companyDTO))
          return false;
      }

      boolean this_present_loginId = true && this.isSetLoginId();
      boolean that_present_loginId = true && that.isSetLoginId();
      if (this_present_loginId || that_present_loginId) {
        if (!(this_present_loginId && that_present_loginId))
          return false;
        if (!this.loginId.equals(that.loginId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
      if (isSetCompanyDTO())
        hashCode = hashCode * 8191 + companyDTO.hashCode();

      hashCode = hashCode * 8191 + ((isSetLoginId()) ? 131071 : 524287);
      if (isSetLoginId())
        hashCode = hashCode * 8191 + loginId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkOnline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLoginId()).compareTo(other.isSetLoginId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginId, other.loginId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkOnline_args(");
      boolean first = true;

      sb.append("companyDTO:");
      if (this.companyDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.companyDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginId:");
      if (this.loginId == null) {
        sb.append("null");
      } else {
        sb.append(this.loginId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyDTO != null) {
        companyDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkOnline_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkOnline_argsStandardScheme getScheme() {
        return new checkOnline_argsStandardScheme();
      }
    }

    private static class checkOnline_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkOnline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkOnline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
                struct.companyDTO.read(iprot);
                struct.setCompanyDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginId = iprot.readString();
                struct.setLoginIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkOnline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyDTO != null) {
          oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
          struct.companyDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginId != null) {
          oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.loginId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkOnline_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkOnline_argsTupleScheme getScheme() {
        return new checkOnline_argsTupleScheme();
      }
    }

    private static class checkOnline_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkOnline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkOnline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyDTO()) {
          optionals.set(0);
        }
        if (struct.isSetLoginId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompanyDTO()) {
          struct.companyDTO.write(oprot);
        }
        if (struct.isSetLoginId()) {
          oprot.writeString(struct.loginId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkOnline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.companyDTO = new com.aries.user.gaea.contact.model.CompanyDTO();
          struct.companyDTO.read(iprot);
          struct.setCompanyDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginId = iprot.readString();
          struct.setLoginIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkOnline_result implements org.apache.thrift.TBase<checkOnline_result, checkOnline_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkOnline_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkOnline_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkOnline_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkOnline_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkOnline_result.class, metaDataMap);
    }

    public checkOnline_result() {
    }

    public checkOnline_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkOnline_result(checkOnline_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkOnline_result deepCopy() {
      return new checkOnline_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkOnline_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkOnline_result)
        return this.equals((checkOnline_result)that);
      return false;
    }

    public boolean equals(checkOnline_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(checkOnline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkOnline_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkOnline_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkOnline_resultStandardScheme getScheme() {
        return new checkOnline_resultStandardScheme();
      }
    }

    private static class checkOnline_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkOnline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkOnline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkOnline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkOnline_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkOnline_resultTupleScheme getScheme() {
        return new checkOnline_resultTupleScheme();
      }
    }

    private static class checkOnline_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkOnline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkOnline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkOnline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
